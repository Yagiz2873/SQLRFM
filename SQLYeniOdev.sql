SELECT * FROM onlineretaildb.dbo.retail_2010_2011

--Today's Date is 01.01.2012

-- CRM METRICS

SELECT Customer_ID, MIN(InvoiceDate) EnErkenAlisverisTarihi, MAX(InvoiceDate) EnGecAlisverişTarihi
FROM onlineretaildb.dbo.retail_2010_2011
GROUP BY Customer_ID

SELECT *
INTO RetailData_YE
FROM onlineretaildb.dbo.retail_2010_2011


SELECT * FROM RetailData_YE

SELECT Customer_ID, MIN(InvoiceDate) EnErkenAlisverisTarihi, MAX(InvoiceDate) EnGecAlisverişTarihi
FROM RetailData_YE
GROUP BY Customer_ID
ORDER BY Customer_ID

SELECT Customer_ID, MIN(InvoiceDate) EnErkenAlisverisTarihi, MAX(InvoiceDate) EnGecAlisverişTarihi, COUNT(DISTINCT Invoice) FREQUENCY, 
ROUND(AVG(Quantity),0) Quantity, ROUND(AVG(Price),0) Price
INTO HWD_YE
FROM RetailData_YE
GROUP BY Customer_ID
ORDER BY Customer_ID

SELECT * FROM HWD_YE
ORDER BY Customer_ID

ALTER TABLE HWD_YE ADD TENURE AS DATEDIFF(DAY,EnErkenAlisverisTarihi,'20120101')

ALTER TABLE HWD_YE ADD RECENCY AS DATEDIFF(DAY,EnGecAlisverişTarihi,'20120101') 

ALTER TABLE HWD_YE ADD MONETARY AS (Quantity * Price)

ALTER TABLE HWD_YE ADD BASKET_SIZE AS ROUND(((Quantity * Price)/FREQUENCY),0)

SELECT * FROM HWD_YE
ORDER BY Customer_ID

--RFM ANALYSIS / CHALLENGE

ALTER TABLE HWD_YE ADD RECENCY_SCORE VARCHAR(10)

ALTER TABLE HWD_YE ADD FREQUENCY_SCORE VARCHAR(10)

ALTER TABLE HWD_YE ADD MONETARY_SCORE VARCHAR(10)

SELECT *
INTO HWD2_YE
FROM HWD_YE

-- RECENCY SCORE HAS CALCULATED

UPDATE HWD_YE SET RECENCY_SCORE = 
(
 SELECT SCORE FROM
 (
    SELECT hw.* , NTILE(5) OVER(ORDER BY RECENCY DESC) AS SCORE
    FROM HWD_YE AS hw
 ) T
    WHERE T.Customer_ID = HWD_YE.Customer_ID
)

-- FREQUENCY_SCORE HAS CALCULATED

UPDATE HWD_YE SET FREQUENCY_SCORE = 
(
 SELECT SCORE FROM
 (
    SELECT hw.* , NTILE(5) OVER(ORDER BY FREQUENCY) AS SCORE
    FROM HWD_YE AS hw
 ) T
    WHERE T.Customer_ID = HWD_YE.Customer_ID
)


--MONETARY_SCORE HAS CALCULATED

UPDATE HWD_YE SET MONETARY_SCORE = 
(
 SELECT SCORE FROM
 (
    SELECT hw.* , NTILE(5) OVER(ORDER BY MONETARY) AS SCORE
    FROM HWD_YE AS hw
 ) T
    WHERE T.Customer_ID = HWD_YE.Customer_ID
)

--FR SCORE WILL BE CALCULATED

/*
    Recency and Frequency Points, Respectively

    r'[1-2][1-2]': 'Hibernating',
    r'[1-2][3-4]': 'At Risk',
    r'[1-2]5': 'Can\'t Lose',
    r'3[1-2]': 'About to Sleep',
    r'33': 'Need Attention',
    r'[3-4][4-5]': 'Loyal Customers',
    r'41': 'Promising',
    r'51': 'New Customers',
    r'[4-5][2-3]': 'Potential Loyalists',
    r'5[4-5]': 'Champions'



 */

ALTER TABLE HWD_YE ADD FR_SCORE AS (CONVERT(VARCHAR,FREQUENCY_SCORE) + CONVERT(VARCHAR,RECENCY_SCORE) ) 

ALTER TABLE HWD_YE ADD SEGMENT VARCHAR(50)

UPDATE HWD_YE SET SEGMENT = 'Hibernating'
WHERE RECENCY_SCORE LIKE '[1-2]%' AND FREQUENCY_SCORE LIKE '[1-2]%'

UPDATE HWD_YE SET SEGMENT = 'At Risk'
WHERE RECENCY_SCORE LIKE '[1-2]%' AND FREQUENCY_SCORE LIKE '[3-4]%'

UPDATE HWD_YE SET SEGMENT = 'Can Not Lose'
WHERE RECENCY_SCORE LIKE '[1-2]%' AND FREQUENCY_SCORE LIKE '[5]%'

UPDATE HWD_YE SET SEGMENT = 'About To Sleep'
WHERE RECENCY_SCORE LIKE '[3]%' AND FREQUENCY_SCORE LIKE '[1-2]%'

UPDATE HWD_YE SET SEGMENT = 'Need Attention'
WHERE RECENCY_SCORE LIKE '[3]%' AND FREQUENCY_SCORE LIKE '[3]%'



UPDATE HWD_YE SET SEGMENT = 'Loyal Customers'
WHERE RECENCY_SCORE LIKE '[3-4]%' AND FREQUENCY_SCORE LIKE '[4-5]%'

UPDATE HWD_YE SET SEGMENT = 'Promising'
WHERE RECENCY_SCORE LIKE '[4]%' AND FREQUENCY_SCORE LIKE '[1]%'

UPDATE HWD_YE SET SEGMENT = 'New Customers'
WHERE RECENCY_SCORE LIKE '[5]%' AND FREQUENCY_SCORE LIKE '[1]%'

UPDATE HWD_YE SET SEGMENT = 'Potential Loyalists'
WHERE RECENCY_SCORE LIKE '[4-5]%' AND FREQUENCY_SCORE LIKE '[2-3]%'

UPDATE HWD_YE SET SEGMENT = 'Champions'
WHERE RECENCY_SCORE LIKE '[5]%' AND FREQUENCY_SCORE LIKE '[4-5]%' 

-- FINAL ANALYSIS / GROUP BY SEGMENTS 

SELECT * FROM HWD_YE

DELETE FROM HWD_YE 
WHERE Customer_ID IS NULL

SELECT SEGMENT, ROUND(AVG(TENURE),0) TENURE, ROUND(AVG(RECENCY),0) RECENCY, ROUND(AVG(FREQUENCY),0) FREQUENCY ,ROUND(AVG(MONETARY),0) AVG_MONETARY, ROUND(SUM(MONETARY),0) TOTAL_MONETARY ,ROUND(AVG(BASKET_SIZE),0) BASKET_SIZE
FROM HWD_YE
GROUP BY SEGMENT  


SELECT * FROM Categories 

SELECT * FROM Customers WHERE City IN ('Berlin','London')  
